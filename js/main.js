window.UNITY_BODY_UI_REGISTRY = {};

class UnityWebGL extends HTMLElement {
    #myGameInstance = null;

    constructor() {
        super();
        this.innerHTML = this.template;

        window.UNITY_BODY_UI_REGISTRY[this.id] = this;
    }

    get template() {
        //Structure taken from UnityWebGL autogenerated page
        const id = this.id;
        return `
        <div id="unity-container" class="unity-desktop">
        <canvas id="unity-canvas" width=960 height=600></canvas>
        <div id="unity-loading-bar">
            <div id="unity-logo"></div>
            <div id="unity-progress-bar-empty">
            <div id="unity-progress-bar-full"></div>
            </div>
        </div>
        <div id="unity-warning"> </div>
        <div id="unity-footer">
            <div id="unity-webgl-logo"></div>
            <div id="unity-fullscreen-button"></div>
        </div>
        </div>
        `;
    }

    connectedCallback(){
        //Create a reference to the shadow dom root
        const root = this;
        var container = root.querySelector('#unity-container');
        var canvas = root.querySelector('#unity-canvas');
        var loadingBar = root.querySelector('#unity-loading-bar');
        var progressBarFull = root.querySelector('#unity-progress-bar-full');
        var fullscreenButton = root.querySelector('#unity-fullscreen-button');
        var warningBanner = root.querySelector('#unity-warning');

        console.log(loadingBar);

        // Shows a temporary message banner/ribbon for a few seconds, or
        // a permanent error message on top of the canvas if type=='error'.
        // If type=='warning', a yellow highlight color is used.
        function unityShowBanner(msg, type) {
            function updateBannerVisibility() {
            warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
            }
            var div = root.createElement('div');
            div.innerHTML = msg;
            warningBanner.appendChild(div);
            if (type == 'error') div.style = 'background: red; padding: 10px;';
            else {
            if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
            setTimeout(function() {
                warningBanner.removeChild(div);
                updateBannerVisibility();
            }, 5000);
            }
            updateBannerVisibility();
        }
        
        //Modify the buildUrl for different path
        var buildUrl = "../build";
        var loaderUrl = buildUrl + "/Webgl Build.loader.js";
        var config = {
            dataUrl: buildUrl + "/Webgl Build.data",
            frameworkUrl: buildUrl + "/Webgl Build.framework.js",
            codeUrl: buildUrl + "/Webgl Build.wasm",
            streamingAssetsUrl: "StreamingAssets",
            companyName: "DefaultCompany",
            productName: "ShellTexturingProject",
            productVersion: "0.1",
            showBanner: unityShowBanner,
      };

        console.log(config);

        // By default Unity keeps WebGL canvas render target size matched with
        // the DOM size of the canvas element (scaled by window.devicePixelRatio)
        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
            // Mobile device style: fill the whole browser client area with the game canvas:

            var meta = document.createElement('meta');
            meta.name = 'viewport';
            meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';
            document.getElementsByTagName('head')[0].appendChild(meta);
            container.className = "unity-mobile";

            // To lower canvas resolution on mobile devices to gain some
            // performance, uncomment the following line:
            // config.devicePixelRatio = 1;

            canvas.style.width = window.innerWidth + 'px';
            canvas.style.height = window.innerHeight + 'px';

            unityShowBanner('WebGL builds are not supported on mobile devices.');
        } else {
            // Desktop style: Render the game canvas in a window that can be maximized to fullscreen:

        }

        loadingBar.style.display = "block";

        //Start playing the unity build
        var script = document.createElement("script");
        script.src = loaderUrl;
        script.onload = () => {
            createUnityInstance(canvas, config, (progress) => {
            progressBarFull.style.width = 100 * progress + "%";
            }).then((unityInstance) => {
            loadingBar.style.display = "none";
            
            //game loaded initialize data
            this.setUnityInstance(unityInstance);

            fullscreenButton.onclick = () => {
                unityInstance.SetFullscreen(1);
            };
            }).catch((message) => {
                // alert(message);
                console.log(message);
            });
        };

        //attach to this script
        root.appendChild(script);
    }
}

//define the class and use it
window.customElements.define('unity-wc', UnityWebGL)